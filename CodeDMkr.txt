#include <WiFi101.h>
#include <PubSubClient.h>
#include <Servo.h>
#include <DHT.h>

// ⚡ Paramètres WiFi et MQTT
const char* ssid = "Samsung";         // Nom du WiFi
const char* password = "H120005065."; // Mot de passe WiFi
const char* mqtt_server = "192.168.53.94";  // IP du broker MQTT
const char* mqtt_topic = "home/mkr/sensors"; // Topic MQTT pour les capteurs

WiFiClient espClient;
PubSubClient client(espClient);

// ⚡ Définition des broches
const int FAN_PIN = 5;
const int LED_PIN = 4;
const int SERVO_PIN = 9;
#define DHTPIN 6
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

Servo servo;

// ⚡ Variables de gestion du temps
unsigned long lastDHTTime = 0;    // Dernière fois où les données ont été envoyées
unsigned long interval = 60000;    // Intervalle de 60 secondes pour l'envoi des données

void setup() {
    Serial.begin(115200);
    delay(1000);

    // 🔄 Connexion WiFi
    Serial.print("🔄 Connexion au WiFi ");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }
    Serial.println("\n✅ Connecté au WiFi !");
    Serial.print("📡 Adresse IP : ");
    Serial.println(WiFi.localIP());

    // 🔄 Configuration MQTT
    client.setServer(mqtt_server, 1883);
    client.setCallback(callback);
    reconnectMQTT();

    // 🔄 Initialisation du DHT11
    dht.begin();
    delay(2000);  // Laisser le capteur se stabiliser

    // 🔄 Configuration des broches
    pinMode(FAN_PIN, OUTPUT);
    pinMode(LED_PIN, OUTPUT);
    servo.attach(SERVO_PIN);
}

// 📌 Callback pour gérer les messages MQTT
void callback(char* topic, byte* payload, unsigned int length) {
    String msg = "";
    for (int i = 0; i < length; i++) {
        msg += (char)payload[i];
    }

    Serial.print("📩 Message reçu sur [");
    Serial.print(topic);
    Serial.print("] : ");
    Serial.println(msg);

    // Contrôle des périphériques
    if (String(topic) == "fan/control") {
        digitalWrite(FAN_PIN, msg == "ON" ? HIGH : LOW);
        Serial.println(msg == "ON" ? "🌬️ Ventilateur ALLUMÉ" : "🛑 Ventilateur ÉTEINT");
    } 
    else if (String(topic) == "led/control") {
        digitalWrite(LED_PIN, msg == "ON" ? HIGH : LOW);
        Serial.println(msg == "ON" ? "💡 LED ALLUMÉE" : "🌑 LED ÉTEINTE");
    } 
    else if (String(topic) == "servo/angle") {
        int angle = msg.toInt();
        servo.write(angle);
        Serial.print("🔄 Servo positionné à ");
        Serial.print(angle);
        Serial.println("°");
    }
}

// 📌 Fonction pour envoyer les données du DHT11 via MQTT
void sendSensorData() {
    float humidity = dht.readHumidity();
    float temperature = dht.readTemperature();
  
    if (!isnan(humidity) && !isnan(temperature)) {
        if (client.connected()) {
            String payload = "{\"temperature\": " + String(temperature) + ", \"humidity\": " + String(humidity) + "}";
            client.publish(mqtt_topic, payload.c_str());
            Serial.println("📡 Données envoyées : " + payload);
        } else {
            Serial.println("⚠️ Impossible d'envoyer les données, MQTT déconnecté !");
        }
    } else {
        Serial.println("❌ Erreur de lecture du DHT11 !");
    }
}

// 📌 Reconnexion au broker MQTT
void reconnectMQTT() {
    while (!client.connected()) {
        Serial.println("🔄 Connexion au broker MQTT...");
        if (client.connect("ArduinoMKR1000")) {
            Serial.println("✅ Connecté au broker MQTT !");
            client.subscribe("fan/control");
            client.subscribe("led/control");
            client.subscribe("servo/angle");
        } else {
            Serial.print("❌ Échec MQTT, erreur: ");
            Serial.println(client.state());
            Serial.println("⏳ Nouvelle tentative dans 5s...");
            delay(5000);
        }
    }
}

void loop() {
    if (!client.connected()) {
        reconnectMQTT();
    }
    client.loop();

    unsigned long currentMillis = millis();
  
    // Vérifier si 60 secondes sont passées
    if (currentMillis - lastDHTTime >= interval) {
        lastDHTTime = currentMillis;  // Sauvegarder le temps actuel
        sendSensorData();  // Envoyer les données du DHT11
    }
}
